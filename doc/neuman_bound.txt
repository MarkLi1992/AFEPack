我们学偏微分方程的数值解的课程的时候，首先就是解泊松方程。而在会用有限
元程序求解泊松方程了以后，马上就会考虑泊松方程的一些变形。当然，如果不
使用一些软件包，白手起家来做一个有限元程序求解泊松方程的话，确实需要相
当的勇气和时间的。

在考虑泊松方程的变形的时候，或许第一件想做的事情就是期望解一下Neuman边
值问题了。但是事实上的情况是，求解变二次系数的方程的实现，比实现Neuman
边值的程序要简单得多。

前面，我们已经看到了变二次系数的方程的求解。这里，让我们来讨论Neuman边
值问题的实现方法。应用边值条件这个问题之所以麻烦，就麻烦在边值条件其实
是一个约束。我们实现它的方法，却绝对不能将它作为一个约束加上去，否则就
会面临要解一个非正定矩阵的尴尬局面，是无论如何不能接受的。因此，我们必
须将这个约束手工从线性系统中消去。

要想手工地修正线性系统，我们必须深入了解线性系统中实现矩阵和向量的这些
类。现在AFEPack使用的是来自deal.II的线性代数包，所以，我们在这里先介绍
一下deal.II中提供的稀疏矩阵和向量的类的结构和使用方法。

deal.II的作者Wolfgang曾经因为AFEPack中实现的多线程类的界面中，使用了
deal.II的代码中实现技术而发信质问我。但是我其实在那里已经给了deal.II包
citation的，只是因为我现在为了方便使用中文的用户，改用中文写注释了。而
Wolfgang是因为看不懂中文找不到给他的引用在什么地方而已。

我在这里提到这个，主要是希望提醒一些同僚，以后在这些敏感的位置，还是细
致一些比较恰当。Wolfgang本人是一个广受称赞的绝对nice guy，但是对于
credit这样的事情也是毫不含糊的哦，;-)

鉴于这个原因，我在这下面写一句英文的说明，主要是为了给deal.II的作者们
看的。

In the following, let us discussed the usage of the sparse matrix and
vector implemented in deal.II(url: http://www.dealii.org). Please
refer the original document obtained from its homepage for details.

AFEPack使用了deal.II中的线性代数包，看中的是deal.II中的实现结构很漂亮，
给使用者的接口通过细致的面对对象的分析，相当合理和有扩展性。作为设计算
法的研究人员，我并不在意其中的求解器是否高效－－－反正我们是要自己写求
解器的。另外，现在新版的deal.II开始支持使用petsc的求解器，这或许对很多
不想自己写求解器的人来说，是个大好事啊。

deal.II中的稀疏矩阵，使用的是所谓的行压缩存储结构。这个行也所存储结构，
事实上就是用三个数组来存储一个稀疏矩阵的非零元素。如果您不知道啥叫做稀
疏矩阵的话，我这里就不补课了。

考虑一个 M x N 的稀疏矩阵，这三个数组分别叫做：

1. 行开始指标数组(rowstarts)
   这是一个长度为 M + 1 的整数数组，其中第 i 个位置的这个整数的值，是
   我们从矩阵的第 0 行开始，按行来数矩阵中的非零元素的个数，一直数到第
   i 行的第一个非零元素的时候，数出来的这个数。由于是用 C++，这里我们
   的记数都是从 0 开始的。

   从而我们知道，这个数组的第 0 个元素总是 0 的，第 M 个元素则是该矩阵
   中所有非零元的个数，记为 nnz。

2. 列指标数组(colnums)
   这也是一个整数数组，长度为 nnz。其中的每个元素事实上就是每一行的非
   零元素是哪一列的列指标。比如，对于第 i 行，我们知道这一行总共的非零
   元的个数是

         rowstarts[i + 1] - rowstarts[i]

   而这一行的哪几个列是非零的，这些列的列指标就是colnums数组中的

         colnums[rowstarts[i]],
         colnums[rowstarts[i] + 1],
         ... ...,
         colnums[rowstarts[i + 1] - 1]

   这些个数。

   其实，有了上面的这两个数组，我们就已经获得了这个稀疏矩阵的非零元分
   布的样子了。所以，这两个数组在deal.II中先首先包装成为了所谓的稀疏模
   板类SparsityPattern。这样的包装是非常必要的，因为我们常常会使用相同
   的稀疏模板构造很多不同的稀疏矩阵。

3. 矩阵元素数组(val)
   这是长度为 nnz 的实数数组，现在deal.II对float, double两种数据类型进
   行有特别的实现。这个数组中的第 k 个元素的意义为：

   如果 rowstarts[i] <= k < rowstarts[i + 1]，而 j = colnums[k]，则矩
   阵中的元素

         a(i, j) = val[k]

   deal.II的稀疏矩阵类SparseMatrix中包含一个对SparsityPattern的引用以
   及一个val数组。

所以，您需要学会SparsityPattern和SparseMatrix这两个类的使用方法。

写太长了，只能在下一篇中说边界条件的问题了... ...
